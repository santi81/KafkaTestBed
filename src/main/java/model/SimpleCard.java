/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package model;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SimpleCard extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 9182980353089979077L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SimpleCard\",\"namespace\":\"model\",\"fields\":[{\"name\":\"suit\",\"type\":\"string\",\"doc\":\"The suit of the card\"},{\"name\":\"card\",\"type\":\"string\",\"doc\":\"The card number\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** The suit of the card */
  @Deprecated public java.lang.CharSequence suit;
  /** The card number */
  @Deprecated public java.lang.CharSequence card;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SimpleCard() {}

  /**
   * All-args constructor.
   * @param suit The suit of the card
   * @param card The card number
   */
  public SimpleCard(java.lang.CharSequence suit, java.lang.CharSequence card) {
    this.suit = suit;
    this.card = card;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return suit;
    case 1: return card;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: suit = (java.lang.CharSequence)value$; break;
    case 1: card = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'suit' field.
   * @return The suit of the card
   */
  public java.lang.CharSequence getSuit() {
    return suit;
  }

  /**
   * Sets the value of the 'suit' field.
   * The suit of the card
   * @param value the value to set.
   */
  public void setSuit(java.lang.CharSequence value) {
    this.suit = value;
  }

  /**
   * Gets the value of the 'card' field.
   * @return The card number
   */
  public java.lang.CharSequence getCard() {
    return card;
  }

  /**
   * Sets the value of the 'card' field.
   * The card number
   * @param value the value to set.
   */
  public void setCard(java.lang.CharSequence value) {
    this.card = value;
  }

  /**
   * Creates a new SimpleCard RecordBuilder.
   * @return A new SimpleCard RecordBuilder
   */
  public static model.SimpleCard.Builder newBuilder() {
    return new model.SimpleCard.Builder();
  }

  /**
   * Creates a new SimpleCard RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SimpleCard RecordBuilder
   */
  public static model.SimpleCard.Builder newBuilder(model.SimpleCard.Builder other) {
    return new model.SimpleCard.Builder(other);
  }

  /**
   * Creates a new SimpleCard RecordBuilder by copying an existing SimpleCard instance.
   * @param other The existing instance to copy.
   * @return A new SimpleCard RecordBuilder
   */
  public static model.SimpleCard.Builder newBuilder(model.SimpleCard other) {
    return new model.SimpleCard.Builder(other);
  }

  /**
   * RecordBuilder for SimpleCard instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SimpleCard>
    implements org.apache.avro.data.RecordBuilder<SimpleCard> {

    /** The suit of the card */
    private java.lang.CharSequence suit;
    /** The card number */
    private java.lang.CharSequence card;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(model.SimpleCard.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.suit)) {
        this.suit = data().deepCopy(fields()[0].schema(), other.suit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card)) {
        this.card = data().deepCopy(fields()[1].schema(), other.card);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SimpleCard instance
     * @param other The existing instance to copy.
     */
    private Builder(model.SimpleCard other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.suit)) {
        this.suit = data().deepCopy(fields()[0].schema(), other.suit);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.card)) {
        this.card = data().deepCopy(fields()[1].schema(), other.card);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'suit' field.
      * The suit of the card
      * @return The value.
      */
    public java.lang.CharSequence getSuit() {
      return suit;
    }

    /**
      * Sets the value of the 'suit' field.
      * The suit of the card
      * @param value The value of 'suit'.
      * @return This builder.
      */
    public model.SimpleCard.Builder setSuit(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.suit = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'suit' field has been set.
      * The suit of the card
      * @return True if the 'suit' field has been set, false otherwise.
      */
    public boolean hasSuit() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'suit' field.
      * The suit of the card
      * @return This builder.
      */
    public model.SimpleCard.Builder clearSuit() {
      suit = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'card' field.
      * The card number
      * @return The value.
      */
    public java.lang.CharSequence getCard() {
      return card;
    }

    /**
      * Sets the value of the 'card' field.
      * The card number
      * @param value The value of 'card'.
      * @return This builder.
      */
    public model.SimpleCard.Builder setCard(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.card = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'card' field has been set.
      * The card number
      * @return True if the 'card' field has been set, false otherwise.
      */
    public boolean hasCard() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'card' field.
      * The card number
      * @return This builder.
      */
    public model.SimpleCard.Builder clearCard() {
      card = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public SimpleCard build() {
      try {
        SimpleCard record = new SimpleCard();
        record.suit = fieldSetFlags()[0] ? this.suit : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.card = fieldSetFlags()[1] ? this.card : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
